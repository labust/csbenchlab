function register_component_library(path, link_register)
    if isfolder(path)

        if endsWith(path, '/')
            path = path(1:end-1);
        end
        meta = readstruct(fullfile(path, 'package.json'));
        reg = get_app_registry_path();
        name = meta.library;

        if exist(fullfile(reg, name), 'dir')
            rmdir(fullfile(reg, name), 's');
        end


        if ~link_register
            dest_path = fullfile(reg, name);
            copyfile(path, dest_path);
        else
            link_lib.path = path;
            writestruct(link_lib, fullfile(reg, strcat(name, '.json')));
            dest_path = path;
        end
        % remove autogen folder, because it will be autogenerated
        if isfolder(fullfile(dest_path, 'autogen'))
            rmpath(fullfile(dest_path, 'autogen'));
            rmdir(fullfile(dest_path, 'autogen'), "s");
        end

        handle = get_or_create_component_library(dest_path);
        plugin_desc_path = fullfile(dest_path, 'plugins.json');
        registry = make_component_registry_from_plugin_description(plugin_desc_path, ...
            fullfile(dest_path, 'autogen'));

        fnames = fieldnames(registry);
        types = get_component_types();
        for i=1:length(fnames)
            fname = fnames{i};
            if ~any(arrayfun(@(x) strcmp(fname, x), types))
                warning(strcat("Found unknown component type '", fname, "'."));
                continue
            end
    
            plugin_list = registry.(fname);
            for j = 1:length(plugin_list)
                register_component(plugin_list{j}, parse_comp_type(fname), handle.name);
            end
        end
        
        % exception: m controllers have to generate log function 
        generate_get_m_controller_log_function_handle(registry.ctl);

        addpath(dest_path);
        addpath(fullfile(dest_path, name));
        addpath(fullfile(dest_path, 'autogen'));
        close_library(name);
    end
end

