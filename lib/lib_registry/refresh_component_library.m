function refresh_component_library(lib)
    reg = get_app_registry_path();
        
    if isfolder(fullfile(reg, lib))
        dest_path = fullfile(reg, lib);
    elseif isfile(fullfile(reg, strcat(lib, '.json')))
        s = readstruct(fullfile(reg, strcat(lib, '.json')));
        dest_path = s.path;
    else
        error(strcat("Library '", lib, "' does not exist"));
    end

    try

        % remove autogen folder, because it will be autogenerated
        if isfolder(fullfile(dest_path, 'autogen'))
            rmpath(fullfile(dest_path, 'autogen'));
            rmdir(fullfile(dest_path, 'autogen'), "s");
        end

        addpath(dest_path);
        addpath(fullfile(dest_path, lib));
        addpath(fullfile(dest_path, 'autogen'));
        if isfolder(fullfile(dest_path, 'src'))
            addpath(fullfile(dest_path, 'src'));
        end
    
        handle = get_or_create_component_library(dest_path);
        plugin_desc_path = fullfile(dest_path, 'plugins.json');
        registry = make_component_registry_from_plugin_description(plugin_desc_path, ...
            lib, fullfile(dest_path, 'autogen'));
    
        fnames = fieldnames(registry);
        types = get_component_types();
        for i=1:length(fnames)
            fname = fnames{i};
            if ~any(arrayfun(@(x) strcmp(fname, x), types))
                warning(strcat("Found unknown component type '", fname, "'."));
                continue
            end
    
            plugin_list = registry.(fname);
            for j = 1:length(plugin_list)
                register_component(plugin_list{j}, parse_comp_type(fname), handle.name, handle.path, 0);
            end
        end
        
    
        
        close_library(lib);
        refresh_csbenchlab();
    catch ME
        close_library(lib);
        rethrow(ME);
    end

end

